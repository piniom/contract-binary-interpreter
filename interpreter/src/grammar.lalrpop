use std::str::FromStr;
use crate::types::*;

grammar;

pub Function: Function = {
    "fn" <i:Identifier> "(" <a:Comma<Argument>> ")" "{" <b:String> "}"=> Function {
        name: i,
        args: a,
        body: b.to_string()
    }
}

Term: i32 = {
    <n:Num> => n,
    "(" <t:Term> ")" => t,
};

Comma<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

Num: i32 = <s:r"[0-9]+"> => i32::from_str(s).unwrap();
Type: Type = {
    <p:SimplePath> => Type {
        path: p,
        generics: vec![]
    },
    <p:SimplePath> "<" <g:Comma<Type>> ">" => Type {
        path: p,
        generics: g
    }
}
SimplePath: SimplePath = {
    <mut v:(<Identifier>"::")*> <e:Identifier> => {
        v.push(e);
        v
    }
}
Identifier: String = <s:r"[a-zA-Z_][a-zA-Z_0-9]*"> => s.to_string();
Argument: Argument = <n:Identifier> ":" <t:Type> => Argument{
    name: n,
    ty: t
};
Whitespace: () = <s:r"\s+"> => ();
